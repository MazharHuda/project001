Certainly! I'll create a comprehensive, step-by-step guide to set up your project, incorporating all the relevant information from our conversation and addressing the errors we encountered. This guide will take you from start to finish in setting up your static website with CI/CD using GitHub Actions and deploying to an AWS EC2 instance.

Let's begin:

1. Set up your local environment:

```bash
# Clone the repository
git clone https://github.com/awsfreetier30/code-test-upwork.git
cd code-test-upwork

# Create necessary directories
mkdir -p .github/workflows

# Create .gitignore file
echo "private_key" > .gitignore
echo ".env" >> .gitignore

```

2. Create the GitHub Actions workflow file:

name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1  # Replace with your AWS region

    - name: Deploy to EC2
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        HOST: ${{ secrets.EC2_HOST }}
        USER: ubuntu
      run: |
        echo "$PRIVATE_KEY" > private_key
        chmod 600 private_key
        ssh -i private_key -o StrictHostKeyCheckiml
          sudo chmod -R 755 /var/www/html
        'ng=no ${USER}@${HOST} '
          sudo chown -R ubuntu:ubuntu /var/www/ht
        scp -i private_key -o StrictHostKeyChecking=no -r ./* ${USER}@${HOST}:/var/www/html/
        ssh -i private_key -o StrictHostKeyChecking=no ${USER}@${HOST} '
          sudo systemctl restart apache2
        '

3. Set up AWS EC2 instance:
   - Launch an EC2 instance with Ubuntu 22.04 AMI.
   - Configure security groups to allow SSH (port 22) and HTTP (port 80) access.

4. Configure EC2 instance:
   SSH into your EC2 instance and run the following setup script:

```bash
#!/bin/bash

# Update system packages
sudo apt update
sudo apt upgrade -y

# Install Apache
sudo apt install -y apache2

# Enable Apache modules
sudo a2enmod rewrite

# Configure Apache
sudo tee /etc/apache2/sites-available/000-default.conf > /dev/null <<EOT
<VirtualHost *:80>
    ServerAdmin webmaster@localhost
    DocumentRoot /var/www/html

    <Directory /var/www/html>
        Options Indexes FollowSymLinks
        AllowOverride All
        Require all granted
    </Directory>

    ErrorLog \${APACHE_LOG_DIR}/error.log
    CustomLog \${APACHE_LOG_DIR}/access.log combined
</VirtualHost>
EOT

# Set proper permissions
sudo chown -R ubuntu:ubuntu /var/www/html
sudo chmod -R 755 /var/www/html

# Add www-data to ubuntu group
sudo usermod -a -G ubuntu www-data

# Restart Apache
sudo systemctl restart apache2

echo "EC2 instance setup complete!"

```

5. Configure GitHub repository:

Go to your GitHub repository > Settings > Secrets and variables > Actions.
Add the following secrets:

AWS_ACCESS_KEY_ID: Your AWS access key ID
AWS_SECRET_ACCESS_KEY: Your AWS secret access key
EC2_SSH_PRIVATE_KEY: The private key to SSH into your EC2 instance
EC2_HOST: The public DNS or IP address of your EC2 instance

6. Set up Git authentication:
   Generate a Personal Access Token (PAT) on GitHub:
   - Go to GitHub > Settings > Developer settings > Personal access tokens > Tokens (classic)
   - Click "Generate new token" and select "Generate new token (classic)"
   - Give your token a descriptive name
   - Select the "repo" scope
   - Click "Generate token" and copy the token

   Then, in your local repository:

```bash
# Set up Git credential helper
git config --global credential.helper store

# Set your GitHub username and email
git config --global user.name "Your GitHub Username"
git config --global user.email "your.email@example.com"

# Update the remote URL with your token
git remote set-url origin https://YOUR-USERNAME:YOUR-TOKEN@github.com/awsfreetier30/code-test-upwork.git

# Verify the configuration
git config --global --list

```

7. Push your changes:
   ```bash
   git add .
   git commit -m "Set up CI/CD workflow"
   git push origin main
   ```

8. Monitor the deployment:
   - Go to your GitHub repository's "Actions" tab.
   - You should see the workflow running. Monitor it for any errors.

9. Verify the deployment:
   - Once the workflow completes successfully, visit your EC2 instance's public DNS or IP address in a web browser.
   - You should see your static website with the three images.

10. Troubleshooting:
    If you encounter any issues:
    - Check the GitHub Actions logs for detailed error messages.
    - SSH into your EC2 instance and check Apache logs:
      ```
      sudo tail -f /var/log/apache2/error.log
      ```
    - Ensure all file permissions are correct on the EC2 instance:
      ```
      sudo chown -R ubuntu:ubuntu /var/www/html
      sudo chmod -R 755 /var/www/html
      ```

11. Updating your website:
    - Make changes to your local files.
    - Commit and push the changes to GitHub.
    - The GitHub Actions workflow will automatically deploy the updates to your EC2 instance.

By following these steps, you should have a fully functional static website deployed on an EC2 instance with a CI/CD pipeline set up through GitHub Actions. This setup allows for easy updates and maintenance of your website.

Remember to keep your GitHub Personal Access Token and EC2 SSH key secure. If you suspect they've been compromised, regenerate them immediately.

Is there anything specific about this process you'd like me to clarify or expand upon?